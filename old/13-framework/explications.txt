----------------
⚠️️ ARBORESCENCE
----------------

    app/    :   La configuration de notre application (infos de connexion BDD...)
    src/    :   Le code PHP et HTML spécifique à notre app (Notre code)
    vendor/ :   Coeur / Code général de l'app
    web/    :   Le répertoire web racine (index.php, img/, photo/, js/, css/, font/,... biblios FRONT)
                (= tt ce à quoi l'utlisateur aura accès depuis son navigateur)

        
---------------------------------
⚠️️ NATURE DES DIFFERENTS FICHIERS
---------------------------------

app/
    Config/
        parameters.php : 🔸 Contient ttes les infos de connexion à notre BDD 
                         et éventuellt d'autres paramètres de notre app.

    Config.php : Contient une classe dont l'objectif est de 🔸 récup les infos de connexion et 
                 de les "servir" à notre futur PDOManager qui fera la connexion à la BDD via PDO.


vendor/
    autoload.php :  Permet d'🔸 inclure les bons fichiers au bon moment (lors des instanciations) et nous permet 
                    d'🔸 éviter d'avoir à faire de nbrx require... Attention certains fichiers seront dans vendor/ 
                    et d'autres dans src/,notre autoload devra donc 🔸 savoir les distinguer...
                    Rq. autoload fait partie du 🔸 coeur du framework (ex : symfonie = déjà codé)


src/
    Entity/
        Produit.php     -       Membre.php      -      Commande.php
        Ces classes contiennent 🔸 ttes les propriétés des entités de notre appli (et les getter et setter).
        On les appelle des 🔸 POPO 🔸  (Plain Old PHP Object).
        On trv en objet => Il ns faut dc des classes, qui permettent de construire des objets pr chaq entité 
        de notre site (⚠️️ = ce sont les plans de fabrication, nos moules !)


web/
    index.php   :   clé d'entrée de notre application (Symfony : app.php ou app_dev.php). 
                    C'est à partir de la que le site se déploie.
                    Dans notre application, c'est ici que l'on 🔸 crée la session, faisons le 🔸 require de l'autoload et 🔸 instancierons la classe Application (interrupteur.)

vendor/
    Manager/
        PDOManager  : ⚠️️ Cette classe représente la connexion à la BDD. 
                      Elle contient et nous retourne notre 🔸 objet PDO grâce auquel ns pourrons effectuer des requêtes.
                      Cette classe est un 🔸 Singleton <=> il ne peut y avoir qu'un seul objet issu de cette classe.

    Model/
        Model.php   : Un model 🔸 centralise tout ce qui touche à la BDD (ttes les requêtes)
                      Concrètement il ne devrait pas y avoir de requête SQL en dehors de l'un de nos models.    
                      Dans ce fichier nous allons 🔸 coder les outils communs à ts nos models ainsi 
                      que les requêtes génériques.


src/
    Model/
        ProduitModel.php  : ⚠️️ Ce fichier contiendra ttes les fct (requetes) liées à l'entité Produit (table produit) 
                            et 🔸 demandera à Model.php (son parent) d'exécuter des requêtes génériq.
                            Lorsqu'une entité a besoin de 🔸 requête(s) spécifiques qui ne peut ê génériq ds Model on la code ici.
                            Ex. : des jointures


vendor/
    Controller/
        Controller.php  : Ce fichier est le contrôleur de l'appli. Il a 2 missions :
                            1.⚠️️ Récup le bon model en fct de l'entité dans laq ns sommes (getModel)
                            2.⚠️️ Afficher la bonne vue en lui transmettant les infos nécess. (render)

src/
    Controller/
        ProduitController.php  :  Cette classe ⚠️️ hérite du Controller, dc est capable de récup le model 
                                  correspondant grâce à 🔸 getMode() et permet de🔸 déclencher ttes les act° 
                                  spécifiques à l'entité Produit.

    View/
        Produit/
            boutique.php    :  ⚠️️ Tout le code HTML de la pg Boutique :
                                    1. retirer ts les traitements PHP
                                    2. Remettre header.inc.php et de footer.inc.php  


web/   
    ⚠️️ Coller ttes les ressources CSS, JS, img, photo, bootstrap...


src/
    View/
        layout.HTML : ⚠️️ Le layout représente la structure d'une page de notre site (Header/Nav/footer).
                          Il peut y avoir plusieurs Layout si necess. (par ex. un pr les membres 
                          Lambda et un pr les admins...)    


web/
    .htaccess : 
        1. text.text
        2. On l'ouvre sur l'éditeur
        3. Enregistrer sous 'all files' .htaccess
        ⚠️️ Le fichier .htaccess va donner l'ordre à notre serveur que ts les liens renvoient vers index.php.
           De fait le lien  :🔸 www.monsite.com/produit/afficheAll  
                    donnera :   www.monsite.com/index.php/produit/afficheAll
                    => on ne quittera jamais le fichier index.php


vendor/
    Manager/
        Application.php  :  Ce fichier lance notre appli ⚠️️ c'est notre interrupteur.
                            Cette classe a pour mission de récup les données ds l'URL (le controller, 
                            l'action et l'arg), et d'instancier le bon controller, lancer la bonne méthode 
                            et y mettre l'argument.






----------------------------

NAMESPACE (Choix subjectifs)

⚠️️ ds l'espace GLOBAL  :   🔸 parameters 🔸 Config 🔸 index 🔸 autoload = pas dans namespaces :
    -> pas vraiment besoin, car +- immuables

⚠️️ dans NAMESPACES     :   🔸 PDOManager 🔸 Commande 🔸 Membre 🔸 Produit



⚠️️ ⚠️️ ⚠️️  explode :   Coupe une chaîne en segments : array
⚠️️ ⚠️️ ⚠️️  implode :   Rassemble les éléments d'un tableau en une chaîne

Require => pour copier tt le code
Use     => pour utiliser un espace